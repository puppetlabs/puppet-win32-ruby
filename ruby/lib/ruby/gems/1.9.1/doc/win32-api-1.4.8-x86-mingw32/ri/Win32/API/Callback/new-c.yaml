--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Creates and returns a new Win32::API::Callback object. The prototype arguments are yielded back to the block in the same order they were declared.
- !ruby/struct:SM::Flow::P 
  body: The <tt>prototype</tt> is the function prototype for the callback function. This is a string. The possible valid characters are 'I' (integer), 'L' (long), 'V' (void), 'P' (pointer) or 'S' (string). Unlike API objects, API::Callback objects do not have a default prototype.
- !ruby/struct:SM::Flow::P 
  body: The <tt>return</tt> argument is the return type for the callback function. The valid characters are the same as for the <tt>prototype</tt>. The default is 'L' (long).
- !ruby/struct:SM::Flow::P 
  body: "Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "   require 'win32/api'\n   include Win32\n\n   EnumWindows = API.new('EnumWindows', 'KP', 'L', 'user32')\n   GetWindowText = API.new('GetWindowText', 'LPI', 'I', 'user32')\n\n   EnumWindowsProc = API::Callback.new('LP', 'I'){ |handle, param|\n      buf = &quot;\\0&quot; * 200\n      GetWindowText.call(handle, buf, 200);\n      puts buf.strip unless buf.strip.empty?\n      buf.index(param).nil? ? true : false\n   }\n\n   EnumWindows.call(EnumWindowsProc, 'UEDIT32')\n"
full_name: Win32::API::Callback::new
is_singleton: true
name: new
params: |
  Win32::API::Callback.new(prototype, return='L'){ |proto| ... }

visibility: public
