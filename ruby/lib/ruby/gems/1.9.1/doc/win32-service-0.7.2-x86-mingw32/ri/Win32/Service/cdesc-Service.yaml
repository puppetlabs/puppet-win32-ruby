--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: config_info
- !ruby/object:RI::MethodSummary 
  name: configure
- !ruby/object:RI::MethodSummary 
  name: delete
- !ruby/object:RI::MethodSummary 
  name: exists?
- !ruby/object:RI::MethodSummary 
  name: get_display_name
- !ruby/object:RI::MethodSummary 
  name: get_service_name
- !ruby/object:RI::MethodSummary 
  name: new
- !ruby/object:RI::MethodSummary 
  name: pause
- !ruby/object:RI::MethodSummary 
  name: resume
- !ruby/object:RI::MethodSummary 
  name: services
- !ruby/object:RI::MethodSummary 
  name: start
- !ruby/object:RI::MethodSummary 
  name: status
- !ruby/object:RI::MethodSummary 
  name: stop
comment: 
- !ruby/struct:SM::Flow::P 
  body: The Service class encapsulates services controller actions, such as creating, starting, configuring or deleting services.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The version of the win32-service library
  name: VERSION
  value: "'0.7.2'"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Includes STANDARD_RIGHTS_REQUIRED, in addition to all other rights
  name: MANAGER_ALL_ACCESS
  value: SC_MANAGER_ALL_ACCESS
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to call the CreateService function
  name: MANAGER_CREATE_SERVICE
  value: SC_MANAGER_CREATE_SERVICE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to connect to the service control manager.
  name: MANAGER_CONNECT
  value: SC_MANAGER_CONNECT
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to call the EnumServicesStatusEx function to list services
  name: MANAGER_ENUMERATE_SERVICE
  value: SC_MANAGER_ENUMERATE_SERVICE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to call the LockServiceDatabase function
  name: MANAGER_LOCK
  value: SC_MANAGER_LOCK
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to call the NotifyBootConfigStatus function
  name: MANAGER_MODIFY_BOOT_CONFIG
  value: SC_MANAGER_MODIFY_BOOT_CONFIG
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to call the QueryServiceLockStatus function
  name: MANAGER_QUERY_LOCK_STATUS
  value: SC_MANAGER_QUERY_LOCK_STATUS
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Includes STANDARD_RIGHTS_REQUIRED in addition to all access rights
  name: ALL_ACCESS
  value: SERVICE_ALL_ACCESS
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to call functions that configure existing services
  name: CHANGE_CONFIG
  value: SERVICE_CHANGE_CONFIG
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to enumerate all the services dependent on the service
  name: ENUMERATE_DEPENDENTS
  value: SERVICE_ENUMERATE_DEPENDENTS
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to make a service report its status immediately
  name: INTERROGATE
  value: SERVICE_INTERROGATE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to control a service with a pause or resume
  name: PAUSE_CONTINUE
  value: SERVICE_PAUSE_CONTINUE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to be able to gather configuration information about a service
  name: QUERY_CONFIG
  value: SERVICE_QUERY_CONFIG
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to be ask the SCM about the status of a service
  name: QUERY_STATUS
  value: SERVICE_QUERY_STATUS
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to call the StartService function to start the service.
  name: START
  value: SERVICE_START
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to call the ControlService function to stop the service.
  name: STOP
  value: SERVICE_STOP
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Required to call ControlService with a user defined control code
  name: USER_DEFINED_CONTROL
  value: SERVICE_USER_DEFINED_CONTROL
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Driver service
  name: KERNEL_DRIVER
  value: SERVICE_KERNEL_DRIVER
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: File system driver service
  name: FILE_SYSTEM_DRIVER
  value: SERVICE_FILE_SYSTEM_DRIVER
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Service that runs in its own process
  name: WIN32_OWN_PROCESS
  value: SERVICE_WIN32_OWN_PROCESS
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Service that shares a process with one or more other services.
  name: WIN32_SHARE_PROCESS
  value: SERVICE_WIN32_SHARE_PROCESS
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The service can interact with the desktop
  name: INTERACTIVE_PROCESS
  value: SERVICE_INTERACTIVE_PROCESS
- !ruby/object:RI::Constant 
  comment: 
  name: DRIVER
  value: SERVICE_DRIVER
- !ruby/object:RI::Constant 
  comment: 
  name: TYPE_ALL
  value: SERVICE_TYPE_ALL
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A service started automatically by the SCM during system startup
  name: BOOT_START
  value: SERVICE_BOOT_START
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A device driver started by the IoInitSystem function. Drivers only
  name: SYSTEM_START
  value: SERVICE_SYSTEM_START
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A service started automatically by the SCM during system startup
  name: AUTO_START
  value: SERVICE_AUTO_START
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A service started by the SCM when a process calls StartService
  name: DEMAND_START
  value: SERVICE_DEMAND_START
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A service that cannot be started
  name: DISABLED
  value: SERVICE_DISABLED
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Error logged, startup continues
  name: ERROR_IGNORE
  value: SERVICE_ERROR_IGNORE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Error logged, pop up message, startup continues
  name: ERROR_NORMAL
  value: SERVICE_ERROR_NORMAL
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Error logged, startup continues, system restarted last known good config
  name: ERROR_SEVERE
  value: SERVICE_ERROR_SEVERE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Error logged, startup fails, system restarted last known good config
  name: ERROR_CRITICAL
  value: SERVICE_ERROR_CRITICAL
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Service is not running
  name: STOPPED
  value: SERVICE_STOPPED
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Service has received a start signal but is not yet running
  name: START_PENDING
  value: SERVICE_START_PENDING
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Service has received a stop signal but is not yet stopped
  name: STOP_PENDING
  value: SERVICE_STOP_PENDING
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Service is running
  name: RUNNING
  value: SERVICE_RUNNING
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Service has received a signal to resume but is not yet running
  name: CONTINUE_PENDING
  value: SERVICE_CONTINUE_PENDING
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Service has received a signal to pause but is not yet paused
  name: PAUSE_PENDING
  value: SERVICE_PAUSE_PENDING
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Service is paused
  name: PAUSED
  value: SERVICE_PAUSED
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Notifies service that it should stop
  name: CONTROL_STOP
  value: SERVICE_CONTROL_STOP
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Notifies service that it should pause
  name: CONTROL_PAUSE
  value: SERVICE_CONTROL_PAUSE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Notifies service that it should resume
  name: CONTROL_CONTINUE
  value: SERVICE_CONTROL_CONTINUE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Notifies service that it should return its current status information
  name: CONTROL_INTERROGATE
  value: SERVICE_CONTROL_INTERROGATE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Notifies a service that its parameters have changed
  name: CONTROL_PARAMCHANGE
  value: SERVICE_CONTROL_PARAMCHANGE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Notifies a service that there is a new component for binding
  name: CONTROL_NETBINDADD
  value: SERVICE_CONTROL_NETBINDADD
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Notifies a service that a component for binding has been removed
  name: CONTROL_NETBINDREMOVE
  value: SERVICE_CONTROL_NETBINDREMOVE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Notifies a service that a component for binding has been enabled
  name: CONTROL_NETBINDENABLE
  value: SERVICE_CONTROL_NETBINDENABLE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Notifies a service that a component for binding has been disabled
  name: CONTROL_NETBINDDISABLE
  value: SERVICE_CONTROL_NETBINDDISABLE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: No action
  name: ACTION_NONE
  value: SC_ACTION_NONE
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Reboot the computer
  name: ACTION_REBOOT
  value: SC_ACTION_REBOOT
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Restart the service
  name: ACTION_RESTART
  value: SC_ACTION_RESTART
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Run a command
  name: ACTION_RUN_COMMAND
  value: SC_ACTION_RUN_COMMAND
full_name: Win32::Service
includes: 
- !ruby/object:RI::IncludedModule 
  name: Windows::Error
- !ruby/object:RI::IncludedModule 
  name: Windows::Service
- !ruby/object:RI::IncludedModule 
  name: Windows::File
- !ruby/object:RI::IncludedModule 
  name: Windows::Process
- !ruby/object:RI::IncludedModule 
  name: Windows::Security
- !ruby/object:RI::IncludedModule 
  name: Windows::MSVCRT::String
- !ruby/object:RI::IncludedModule 
  name: Windows::MSVCRT::Buffer
instance_methods: []

name: Service
superclass: Object
